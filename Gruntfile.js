// Generated by CoffeeScript 1.6.3
(function() {
  var classes, coffeeConfig, concatConfig, example, examples, klass, livereloadPort, mochacliConfig, templates, _fn, _fn1;

  classes = require('./classes');

  examples = require('./examples');

  templates = {
    index: '../fibo.github.io/templates/index.jst',
    classes: '../fibo.github.io/templates/classes.jst',
    examples: '../fibo.github.io/templates/examples.jst'
  };

  livereloadPort = 35729;

  coffeeConfig = {};

  concatConfig = {
    examples: {
      options: {
        banner: 'module.exports = function () {',
        footer: '}'
      },
      files: {}
    }
  };

  mochacliConfig = {
    options: {
      require: ['should'],
      reporter: 'spec',
      bail: true
    },
    all: ['test/*.js'],
    examples: ['test/examples.js'],
    classes: []
  };

  _fn = function(example) {
    var examplePath, testPath;
    testPath = 'test/examples/' + example + '.js';
    examplePath = 'examples/' + example + '.js';
    return concatConfig.examples.files[testPath] = examplePath;
  };
  for (example in examples) {
    _fn(example);
  }

  _fn1 = function(klass) {
    var specPath, testFromSpec, testPath;
    testPath = 'test/' + klass + '.js';
    specPath = 'spec/' + klass + '.coffee';
    testFromSpec = {};
    testFromSpec[testPath] = specPath;
    coffeeConfig[klass] = {
      files: testFromSpec
    };
    mochacliConfig[klass] = [testPath];
    return mochacliConfig.classes.push(testPath);
  };
  for (klass in classes) {
    _fn1(klass);
  }

  module.exports = function(grunt) {
    var npmTask, _i, _len, _ref;
    grunt.initConfig({
      pkg: grunt.file.readJSON('package.json'),
      watch: {
        Gruntfile: {
          files: ['Gruntfile.coffee'],
          tasks: 'watch'
        },
        classes: {
          files: ['classes/*.js'],
          tasks: ['mochacli:classes', 'docco']
        },
        coffee: {
          files: ['spec/*.coffee'],
          tasks: 'coffee'
        },
        docs: {
          files: ['docs/*', 'docs/*/*'],
          tasks: [],
          options: {
            livereload: livereloadPort
          }
        },
        mochacli: {
          files: ['test/*.js', 'classes/*.js'],
          tasks: 'mochacli'
        },
        examples: {
          files: ['examples/*.js'],
          tasks: ['mochacli:examples', 'docco']
        },
        jshint: {
          files: ['index.js', 'classes/*js'],
          tasks: 'jshint'
        }
      },
      coffee: coffeeConfig,
      concat: concatConfig,
      connect: {
        server: {
          options: {
            port: 3000,
            livereload: livereloadPort,
            base: 'docs'
          }
        }
      },
      docco: {
        examples: {
          src: ['examples/*.js'],
          options: {
            template: templates.examples,
            output: 'docs/examples'
          }
        },
        classes: {
          src: ['classes/*.js'],
          options: {
            template: templates.classes,
            output: 'docs/classes'
          }
        }
      },
      jshint: {
        options: grunt.file.readJSON('.jshintrc'),
        classes: {
          options: {
            '-W033': true
          },
          src: ['classes/*js']
        },
        examples: {
          src: ['examples/*js']
        }
      },
      markdown: {
        index: {
          files: [
            {
              expand: true,
              rename: function(dest, src) {
                return dest + '/index.html';
              },
              src: 'README.md',
              dest: 'docs'
            }
          ],
          options: {
            template: templates.index,
            templateContext: {
              title: '<%= pkg.name %>'
            }
          }
        }
      },
      mochacli: mochacliConfig,
      open: {
        index: {
          path: 'http://localhost:3000',
          app: 'chrome'
        }
      }
    });
    _ref = require('matchdep').filterDev('grunt-*');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      npmTask = _ref[_i];
      grunt.loadNpmTasks(npmTask);
    }
    grunt.registerTask('default', ['jshint', 'coffee', 'mochacli', 'docs']);
    return grunt.registerTask('docs', ['docco', 'markdown', 'connect', 'open', 'watch']);
  };

}).call(this);
