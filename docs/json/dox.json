{
    "IperEdge": [
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "IperGraph"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "nodeIds",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Connects nodes</p>\n",
                "summary": "<p>Connects nodes</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function IperEdge(graph, nodeIds) {\n\n  // *graph* must be defined\n  if (_.isUndefined(graph))\n    throw new Error()\n\n  // *graph.nodes* must be an object\n  if (! (_.isObject(graph.nodes)))\n    throw new Error()\n\n  // *nodeIds* must be an array\n  if (! (_.isArray(nodeIds)))\n    throw new Error()\n\n  _.each(nodeIds, function (id) {\n    var node = graph.getNode(id)\n\n    // check that nodeIds refers to existing nodes\n    if (_.isUndefined(node))\n      throw new Error()\n\n    // if maxDegree is not defined there is no trouble ...\n    if (_.isUndefined(node.maxDegree))\n      return\n\n    // otherwise check that node degree is not going to exceed its maxDegree \n    if (node.degree === node.maxDegree)\n      throw new Error()\n  })\n\n  IperElement.call(this, graph)\n\n  Object.defineProperty(this, 'nodeIds', {\n    enumerable: true,\n    value: nodeIds\n  })\n\n  // add this edge to graph\n  graph.edges.push(this)\n}",
            "ctx": {
                "type": "function",
                "name": "IperEdge",
                "string": "IperEdge()"
            }
        },
        {
            "tags": [],
            "description": {
                "full": "<p>inheritance</p>\n",
                "summary": "<p>inheritance</p>\n",
                "body": ""
            },
            "ignore": false,
            "code": "inherits(IperEdge, IperElement)"
        },
        {
            "tags": [],
            "description": {
                "full": "<p>Removes the edge from its graph</p>\n",
                "summary": "<p>Removes the edge from its graph</p>\n",
                "body": ""
            },
            "ignore": false,
            "code": "function remove () {\n  this.graph.removeEdge(this.id)\n}\n\nIperEdge.prototype.remove = remove\n\nmodule.exports = IperEdge",
            "ctx": {
                "type": "function",
                "name": "remove",
                "string": "remove()"
            }
        }
    ],
    "IperElement": [
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "IperGraph"
                    ],
                    "name": "graph",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Base class</p>\n<ul>\n<li>graph</li>\n<li>id</li>\n</ul>\n",
                "summary": "<p>Base class</p>\n",
                "body": "<ul>\n<li>graph</li>\n<li>id</li>\n</ul>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function IperElement (graph) {\n\n  if (_.isUndefined(graph))\n    throw new Error('graph is not defined')\n\n  Object.defineProperty(this, 'graph', {\n    enumerable: false,\n    value: graph,\n    writable: false\n  })\n\n  Object.defineProperty(this, 'id', {\n    enumerable: true,\n    value: _.uniqueId(),\n    writable: false\n  })\n}\n\nmodule.exports = IperElement",
            "ctx": {
                "type": "function",
                "name": "IperElement",
                "string": "IperElement()"
            }
        }
    ],
    "IperGraph": [
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "args",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>A graph with the following attributes</p>\n<ul>\n<li>edges</li>\n<li>nodes</li>\n</ul>\n",
                "summary": "<p>A graph with the following attributes</p>\n",
                "body": "<ul>\n<li>edges</li>\n<li>nodes</li>\n</ul>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function IperGraph () {\n\n  var args = arguments[0] || {}\n\n  //\n  // ## Attributes\n  //\n\n  //\n  // ### edges\n  //\n\n  Object.defineProperty(this, 'edges', {\n    enumerable: true,\n    value: []\n  })\n\n  //\n  // ### nodes\n  //\n\n  Object.defineProperty(this, 'nodes', {\n    enumerable: true,\n    value: []\n  })",
            "ctx": {
                "type": "function",
                "name": "IperGraph",
                "string": "IperGraph()"
            }
        },
        {
            "tags": [],
            "description": {
                "full": "<p>TODO\n  //\n  // ### rank\n  //</p>\n<p>  Object.defineProperty(this, &#39;rank&#39;, {value: {}})</p>\n",
                "summary": "<p>TODO\n  //\n  // ### rank\n  //</p>\n",
                "body": "<p>  Object.defineProperty(this, &#39;rank&#39;, {value: {}})</p>\n"
            },
            "ignore": false
        },
        {
            "tags": [],
            "description": {
                "full": "<p>try to load data passed to constructor</p>\n",
                "summary": "<p>try to load data passed to constructor</p>\n",
                "body": ""
            },
            "ignore": false,
            "code": "try {\n    this.load( {\n      edges: args.edges,\n      nodes: args.nodes\n    })\n  }\n  catch (err) { throw err }\n}\n\n//\n// **TODO**: vedi se riesco a referenziare la funzione load qui sotto nella documentazione\n// This method is used by load to check data is valid\n// ma pu√≤ essere usata anche esternamente come metodo statico\n// dovrebbe essere statico ma ereditabile\n//\n\n\n//\n// Given an object with the following format\n//\n// ```\n// {\n//   nodes: [\n//     {\n//       id: 1\n//     },\n//     {\n//       id: 2\n//     }\n//     ...\n//   ],\n//   edges: [\n//     {\n//       id: 3,\n//       nodeIds: [1, 2]\n//     }\n//     ...\n//   ]\n// }\n// ```\n//\n// performs the followings data checks\n//"
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "data",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Performs data check</p>\n",
                "summary": "<p>Performs data check</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function check(data) {\n  var edges    = data.edges    || []\n    , nodes    = data.nodes    || []\n\n  var nodeIds = _.pluck(nodes, 'id')\n\n  // * ids are unique\n\n   // TODO Da fare anche su edges e subgraph\n\n  if (_.unique(nodeIds).length !== nodeIds.length)\n    throw new Error('duplicated node id')\n\n\n  // * edges refers to existing nodeIds\n  _.each(edges, function (edge) {\n    _.each(edge.nodeIds, function (nodeId) {\n      if (_.indexOf(nodeIds, nodeId) < 0)\n        throw new Error('invalid edge')\n    })\n  })\n\n  return true\n}\n\nIperGraph.prototype.check = check",
            "ctx": {
                "type": "function",
                "name": "check",
                "string": "check()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "data",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Load data</p>\n",
                "summary": "<p>Load data</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function load(data) {\n  var self = this\n\n  // check if data is valid\n  try {\n    check(data)\n  }\n  catch (er) { throw er }\n\n  var edges = data.edges\n    , nodes = data.nodes\n\n  // store a lookup of new <--> old ids\n  var brandNew = {}\n\n  // create new nodes first\n  _.each(nodes, function (node) {\n    var id = node.id\n      , opts = {}\n\n    // remember association between old and new id\n    brandNew[id] = self.createNode(id, opts)\n  })\n\n  // create new edges\n  _.each(edges, function (edge) {\n\n    var newNodeIds = []\n      , oldNodeIds = edge.nodeIds\n\n    // loop over old node ids and get the corresponding new ids\n    _.each(oldNodeIds, function (id) {\n      newNodeIds.push(brandNew[id])\n    })\n\n    // use new ids to create a new edge\n    self.createEdge(newNodeIds)\n  })\n}\n\nIperGraph.prototype.load = load",
            "ctx": {
                "type": "function",
                "name": "load",
                "string": "load()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "nodeIds",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Join nodes with a new edge</p>\n",
                "summary": "<p>Join nodes with a new edge</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function createEdge(nodeIds) {\n  var edge = new IperEdge(this, nodeIds)\n  return edge.id\n}\n\nIperGraph.prototype.createEdge = createEdge",
            "ctx": {
                "type": "function",
                "name": "createEdge",
                "string": "createEdge()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "opts",
                    "description": "<p>passed to IperNode constructor</p>\n"
                }
            ],
            "description": {
                "full": "<p>Create a new node</p>\n",
                "summary": "<p>Create a new node</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function createNode(opts) {\n  var node = new IperNode(this, opts)\n\n  // * returns node id\n  return node.id\n}\n\nIperGraph.prototype.createNode = createNode",
            "ctx": {
                "type": "function",
                "name": "createNode",
                "string": "createNode()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Integer"
                    ],
                    "name": "id",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Return edge given by id</p>\n",
                "summary": "<p>Return edge given by id</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function getEdge(id) {\n  var edgeFound\n\n  _.each(this.edges, function (edge) {\n    if (id === edge.id)\n      edgeFound = edge\n  })\n\n  if (edgeFound)\n    return edgeFound\n  else\n    throw new Error('edge not found')\n}\n\nIperGraph.prototype.getEdge = getEdge",
            "ctx": {
                "type": "function",
                "name": "getEdge",
                "string": "getEdge()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Integer"
                    ],
                    "name": "id",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Return node given by id</p>\n",
                "summary": "<p>Return node given by id</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function getNode(id) {\n  var nodeFound\n\n  _.each(this.nodes, function (node) {\n    if (id === node.id)\n      nodeFound = node\n  })\n\n  if (nodeFound)\n    return nodeFound\n  else\n    throw new Error('node not found')\n}\n\nIperGraph.prototype.getNode = getNode",
            "ctx": {
                "type": "function",
                "name": "getNode",
                "string": "getNode()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Integer"
                    ],
                    "name": "id",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Remove edge given by id</p>\n",
                "summary": "<p>Remove edge given by id</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function removeEdge(id) {\n  var self = this;\n\n  _.each(self.edges, function (edge, index) {\n\n    if (id === edge.id)\n      self.edges.splice(index, 1)\n  })\n}\n\nIperGraph.prototype.removeEdge = removeEdge",
            "ctx": {
                "type": "function",
                "name": "removeEdge",
                "string": "removeEdge()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Integer"
                    ],
                    "name": "id",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Remove node given by id</p>\n<pre><code>graph.removeNode(nodeId)\n</code></pre>",
                "summary": "<p>Remove node given by id</p>\n",
                "body": "<pre><code>graph.removeNode(nodeId)\n</code></pre>"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function removeNode(id) {\n  var self = this\n\n  var edges = this.edges\n    , nodes = this.nodes\n\n    //TODO fai try getNode per fare throw di node not found\n\n  // loop over all edges\n  _.each(edges, function (edge) {\n\n    // loop over edge nodeIds\n    _.each(edge.nodeIds, function (nodeId, index) {\n\n      // drop nodeId from edges linked to removed node\n      if (id === nodeId)\n        edge.nodeIds.splice(index, 1)\n    })\n\n    // remove orphan edges\n    // TODO in realta non sarebbe 2 ma il rank dell' edge\n    if (edge.nodeIds.length < 2)\n      edge.remove()\n  })\n\n  _.each(nodes, function (node, index) {\n    if (id === node.id)\n      self.nodes.splice(index, 1)\n  })\n}\n\nIperGraph.prototype.removeNode = removeNode\n\nmodule.exports = IperGraph",
            "ctx": {
                "type": "function",
                "name": "removeNode",
                "string": "removeNode()"
            }
        }
    ],
    "IperNode": [
        {
            "tags": [
                {
                    "type": "params",
                    "string": "{IperGraph} graph"
                },
                {
                    "type": "params",
                    "string": "{Object} opts"
                }
            ],
            "description": {
                "full": "<p>A node graph</p>\n",
                "summary": "<p>A node graph</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function IperNode(graph, opts) {\n  var self = this\n\n  IperElement.call(this, graph)\n\n  if (!_.isObject(opts))\n    opts = {}\n\n  function getDegree () {\n    var degree = 0\n\n    // Count occurrences of node id in edge.nodeIds\n    // for every edge in the graph.\n    _.each(graph.edges, function (edge) {\n      _.each(edge.nodeIds, function (nodeId) {\n        if (nodeId === self.id)\n          degree++\n      })\n    })\n\n    return degree\n  }\n\n  Object.defineProperty(this, 'degree', {get: getDegree})\n\n  function getMaxDegree () {\n    return opts.maxDegree\n  }\n\n  Object.defineProperty(this, 'maxDegree', {get: getMaxDegree})\n\n  // add this node to graph\n  graph.nodes.push(this)\n}\n\ninherits(IperNode, IperElement)",
            "ctx": {
                "type": "function",
                "name": "IperNode",
                "string": "IperNode()"
            }
        },
        {
            "tags": [
                {
                    "type": "return",
                    "types": [
                        "Array"
                    ],
                    "description": "<p>adjacent node ids</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute adjacent nodes</p>\n",
                "summary": "<p>Compute adjacent nodes</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function getAdjacentNodeIds() {\n  var id = this.id\n\n  var adjacentNodeIds = []\n\n  // loop over all edges\n  _.each(this.graph.edges, function (edge) {\n    // if edge contains node\n    if (_.contains(edge.nodeIds, id))",
            "ctx": {
                "type": "function",
                "name": "getAdjacentNodeIds",
                "string": "getAdjacentNodeIds()"
            }
        },
        {
            "tags": [],
            "description": {
                "full": "<p>take all nodeIds except node self id</p>\n",
                "summary": "<p>take all nodeIds except node self id</p>\n",
                "body": ""
            },
            "ignore": false,
            "code": "adjacentNodeIds.push(_.without(edge.nodeIds, id))\n  })\n\n  // since _.without() return an array and nodeIds can be repeated,\n  // use _.uniq() and _.flatten() to return a flat array with no repetition\n  return _.uniq(_.flatten(adjacentNodeIds))\n}\n\nIperNode.prototype.getAdjacentNodeIds = getAdjacentNodeIds\n\n// TODO remove(), oppure toglilo ad IperEdge\n\nmodule.exports = IperNode"
        }
    ]
}